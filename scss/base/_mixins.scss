// ==========================================================================
//
// MIXINS
//
//


@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@mixin animation--fadedown($delay) {
  // Apply the fadeIn keyframes. Each animation 
  // will take 0.3s and have an ease-in-out
  @include animation(fadeIn 0.3s ease-in-out);
  // This animation should only play once
  @include animation-iteration-count(1);
  // Make sure the element maintains it's 
  // final visual state (i.e. 100% opacity)
  @include animation-fill-mode(forwards);
  // Delay - don't start the animation until we say so
  @include animation-delay(#{$delay}s);
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
       -o-border-radius: $radius;
          border-radius: $radius;
}

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

$breakpoints: (
  "extra-small" 700px,
  "small" 835px,
  "medium" 1100px,
  "large" 1300px,
  "extra-large" 1450px,
  "extra-extra-large" 1800px
);

@mixin mq($size, $type: "min-width") { 
  @each $breakpoint in $breakpoints {
    @if ($size == nth($breakpoint, 1)) {
      @media ($type: nth($breakpoint, 2)) {
        @content;
      }
    }
  }
}

@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }
 
  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));
  
  width: $width;
  height: 0;
  padding-bottom: $height;
}
